


# 終了コード -------
APP_SUCCESS=0	# 成功時
APP_ERROR=1		# エラー終了時

def main() -> int:
    
    # 終了コードを初期化
    exit_cod = APP_SUCCESS
    
    # 最上位の例外補足スコープ
    # 小規模でエラーハンドリングが面倒なら、ここでキャッチしてログに吐く
    try:
        
        # 起動パラメタなどをここで処理
        app_params = setup()
        
        # 処理の開始をログに吐く。
        # Loggerは外部提供ライブラリをラッパーしたものをイメージ。必要なければラッパーじゃなくていい。
        # ※ ログ出力は現代開発なら、なんかaspect的なスマートな方法があるとおもう。
        Logger.info('***** プログラム名 > hogeデータの作成 - 開始')
        
        # ~ 別モジュールに定義された処理を実行 ~ 
        # こんな感じ
        myproc.execute()
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

    
    # 最上位クラスでキャッチするので、キャッチ漏れはない。。。はず。
    # 詳細を調べておくこと
    except Exception as e:
        	
        # エラー内容をログに出力
        # > スタックトレースを含めて、例外インスタンスを渡さなくても、
        # > ラッパーが補足して処理してくれてる感じ。たしかloggingモジュールで実装されている。
        Logger.exception('プログラム名 > hogeデータの作成実行中にエラーが発生しました。')
        
        # 終了コードを「エラー終了」に設定
        exit_code = APP_ERROR    
        
    finally:
        
        # 処理の終了をログに吐く。finallyに実装することで、必ず吐かれる。
        # ただし、Logger生成が必須なので、生成されていない場合は、
        # コンソールに吐くような仕組みが必要。
        # ※ その他補足は処理の開始をログに吐いてるところと一緒。
        if Logger is not None
        	Logger.info('***** プログラム名 > hogeデータの作成 - 終了')
    	
        return exit_code

# __name__== 'main'で
# サブモジュール時は実行されない。。。はず。
# 一応確認する
if __name__== 'main'
    	
        # sys.exitで終了コードを、コールもとに返す。
    	sys.exit(main())
        